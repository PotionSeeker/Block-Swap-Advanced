import com.modrinth.minotaur.TaskModrinthUpload
import java.util.stream.Collectors

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "net.darkhax.curseforgegradle" version "1.1.23"
    id "com.modrinth.minotaur" version "2.+"
}

tasks.build.dependsOn(shadowJar)

configurations {
    shadow
    implementation.extendsFrom(shadow)
}

shadowJar {
    configurations = [project.configurations.shadow]
    relocate 'blue.endless.jankson', "${project.group}.shadow.blue.endless.jankson"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation project(":Common")
}

loom {
    runs {
        def args = []
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs(args)
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version
    inputs.property "mod_id", "${mod_id}"
    from(project(":Common").sourceSets.main.resources) {
        include '**/*.json', '**/*.json5', '**/*.toml', '**/*.mcmeta'
        exclude 'block_swap_advanced.mixins.json', 'block_swap_advanced.refmap.json', '**/*.mixins.json', '**/*.refmap.json'
    }
    from(sourceSets.main.resources) {
        include 'fabric.mod.json', 'block_swap_advanced.mixins.json'
        exclude 'block_swap_advanced_forge.mixins.json' // Prevent accidental inclusion
    }
    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mod_id": "${mod_id}"
    }
    filesMatching("block_swap_advanced.mixins.json") {
        expand "refmap_target": "${mod_id}-", "mod_id": "${mod_id}"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc) {
    failOnError false
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

remapJar {
    input.set shadowJar.archiveFile
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task fabric_checkForRefmap() {
    doLast {
        File file1 = remapJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())
            String refmap = "${archivesBaseName}-refmap.json"
            if (!fileNames.contains(refmap)) {
                throw new IllegalStateException("Refmap ${refmap} is missing.")
            }
        } else {
            throw new IllegalStateException("File is missing.")
        }
        logger.info("Refmap ${refmap} found!")
    }
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')