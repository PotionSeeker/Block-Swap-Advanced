import java.util.stream.Collectors

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'net.darkhax.curseforgegradle' version '1.1.23'
    id 'com.modrinth.minotaur' version '2.+'
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

tasks.build.dependsOn(shadowJar)

configurations {
    shade
    implementation.extendsFrom shade
}

repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    mavenCentral()
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

shadowJar {
    configurations = [project.configurations.shade]
    archiveClassifier = ''
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    from project(':Common').sourceSets.main.output
}

reobf {
    shadowJar { }
}

minecraft {
    mappings channel: 'official', version: '1.20.1'

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,MIXIN'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.debug.verbose', 'true'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}_forge.mixins.json"
            environment "MOD_CLASSES", "${sourceSets.main.output.classesDirs.asPath};${sourceSets.main.output.resourcesDir.path};${project(':Common').sourceSets.main.output.classesDirs.asPath};${project(':Common').sourceSets.main.output.resourcesDir.path}"
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,MIXIN'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.debug.verbose', 'true'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}_forge.mixins.json"
            environment "MOD_CLASSES", "${sourceSets.main.output.classesDirs.asPath};${sourceSets.main.output.resourcesDir.path};${project(':Common').sourceSets.main.output.classesDirs.asPath};${project(':Common').sourceSets.main.output.resourcesDir.path}"
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,MIXIN'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.debug.verbose', 'true'
            args '--mod', mod_id, '--all', '--output', project(':Common').file('src/generated/resources'), '--existing', project(':Common').file('src/main/resources'), "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}_forge.mixins.json"
            environment "MOD_CLASSES", "${sourceSets.main.output.classesDirs.asPath};${sourceSets.main.output.resourcesDir.path};${project(':Common').sourceSets.main.output.classesDirs.asPath};${project(':Common').sourceSets.main.output.resourcesDir.path}"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.2.32"
    implementation project(":Common")
    shade 'blue.endless:jankson:1.2.1'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation 'org.spongepowered:mixin:0.8.5'
}

mixin {
    add project(":Common").sourceSets.main, "${mod_id}.refmap.json"
    add sourceSets.main, "${mod_id}_forge.refmap.json"
    config "${mod_id}.mixins.json"
    config "${mod_id}_forge.mixins.json"
}

tasks.withType(JavaCompile).configureEach {
    if (it.name != 'compileTestJava') {
        source(project(":Common").sourceSets.main.allSource)
        options.annotationProcessorPath = configurations.annotationProcessor
        options.compilerArgs += [
                "-Aorg.spongepowered.asm.mixin.debug=true",
                "-Aorg.spongepowered.asm.mixin.verify=true",
                "-Aorg.spongepowered.asm.mixin.refMapRemappingFile=${projectDir}/build/createSrgToMcp/output.srg"
        ]
        doFirst {
            println "Mixin compiler args for ${it.name}: ${options.compilerArgs}"
            println "Processing sources for ${it.name}: ${source}"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "mod_id", "${mod_id}"
    from(project(":Common").sourceSets.main.resources) {
        include '**/*.json', '**/*.json5', '**/*.toml', '**/*.mcmeta', 'block_swap_advanced.mixins.json'
        include 'block_swap.json5'
    }
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml', 'META-INF/block_swap_advanced_forge.mixins.json'
    }
    filesMatching("block_swap_advanced.mixins.json") {
        expand "refmap_target": "${mod_id}."
    }
    filesMatching("META-INF/block_swap_advanced_forge.mixins.json") {
        expand "refmap_target": "${mod_id}_forge."
    }
}

jar {
    archiveClassifier = 'slim'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
jar.finalizedBy('reobfJar')

tasks.register('forge_checkForRefmap') {
    doLast {
        File file1 = shadowJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())
            String forgeRefmap = "block_swap_advanced_forge.refmap.json"
            String commonRefmap = "block_swap_advanced.refmap.json"
            if (!fileNames.contains(forgeRefmap) || !fileNames.contains(commonRefmap)) {
                throw new IllegalStateException("Refmap ${forgeRefmap} or ${commonRefmap} is missing.")
            }
            logger.info("Refmaps ${forgeRefmap} and ${commonRefmap} found!")
        } else {
            throw new IllegalStateException("File ${file1} is missing.")
        }
    }
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')
//