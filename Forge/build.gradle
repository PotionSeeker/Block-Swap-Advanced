import java.util.stream.Collectors

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "net.darkhax.curseforgegradle" version "1.1.23"
    id "com.modrinth.minotaur" version "2.+"
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

tasks.build.dependsOn(shadowJar)

configurations {
    shadow
    implementation.extendsFrom(shadow)
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier = ''
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Prevent duplicates in shadow JAR
}
reobf {
    shadowJar { } // Remove invalid duplicatesStrategy
}

minecraft {
    mappings channel: 'parchment', version: "${minecraft_version}-${parchment_version}-${minecraft_version}"

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        def runArgs = []
        client {
            jvmArgs runArgs
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}_forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
        }
        server {
            jvmArgs runArgs
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}_forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
        }
        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
        }
        modDataRun {
            source sourceSets.main
            source project(":Common").sourceSets.main
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    library 'blue.endless:jankson:1.2.1'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation 'blue.endless:jankson:1.2.1'
}

mixin {
    add sourceSets.main, "${mod_id}_forge.mixins.json"
    config "${mod_id}_forge.mixins.json"
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "mod_id", "${mod_id}"
    from(project(":Common").sourceSets.main.resources) {
        include '**/*.json', '**/*.json5', '**/*.toml', '**/*.mcmeta'
        exclude 'block_swap_advanced.mixins.json', 'block_swap_advanced.refmap.json'
    }
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml', 'block_swap_advanced_forge.mixins.json'
        exclude 'block_swap_advanced.mixins.json' // Explicitly exclude to avoid conflicts
    }
    filesMatching("block_swap_advanced_forge.mixins.json") {
        expand "refmap_target": "${mod_id}_forge.", "mod_id": "${mod_id}"
    }
}

jar {
    archiveClassifier = 'slim'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
jar.finalizedBy('reobfJar')

task forge_checkForRefmap() {
    doLast {
        File file1 = shadowJar.archiveFile.get().asFile
        logger.info("Verifying refmap exists...")
        if (file1.exists()) {
            FileTree files = zipTree(file1)
            Set<String> fileNames = files.getFiles().stream().map(file -> file.getName()).collect(Collectors.toSet())
            String forgeRefmap = "${mod_id}_forge.refmap.json"
            if (!fileNames.contains(forgeRefmap)) {
                throw new IllegalStateException("Refmap ${forgeRefmap} is missing.")
            }
        } else {
            throw new IllegalStateException("File is missing.")
        }
        logger.info("Refmap ${forgeRefmap} found!")
    }
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')